@section Styles {
    <link rel="stylesheet" href="~/css/category.css" asp-append-version="true" />
}

<div class="container">
    

    <div class="content">
        <!-- Add Category Form -->
        <div class="category-form">
            <h2>
                <i class="fas fa-plus-circle"></i> Add New Category
            </h2>
            <form id="categoryForm">
                <div class="form-group">
                    <label for="categoryName">Category Name</label>
                    <input type="text" id="categoryName" placeholder="Enter category name" required>
                </div>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Category
                </button>
            </form>
        </div>

        <!-- Categories List -->
        <div class="category-list">
            <h2>
                <i class="fas fa-list"></i> Your Categories
            </h2>

            <div class="search-box">
                <i class="fas fa-search"></i>
                <input type="text" id="searchCategory" placeholder="Search categories...">
            </div>

            <table>
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="categoryTableBody">
                    <!-- Categories will be loaded here -->
                </tbody>
            </table>

            <div id="noCategoriesMessage" class="empty-state">
                <i class="fas fa-folder-open"></i>
                <p>No categories found. Add your first category!</p>
            </div>
        </div>
    </div>
</div>

<!-- Edit Modal -->
<div id="editModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2><i class="fas fa-edit"></i> Edit Category</h2>
        <form id="editCategoryForm">
            <input type="hidden" id="editCategoryId">
            <div class="form-group">
                <label for="editCategoryName">Category Name</label>
                <input type="text" id="editCategoryName" required>
            </div>
            <div class="modal-actions">
                <button type="button" class="btn btn-secondary" onclick="closeModal('editModal')">
                    <i class="fas fa-times"></i> Cancel
                </button>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Save Changes
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Delete Modal -->
<div id="deleteModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2><i class="fas fa-trash-alt"></i> Delete Category</h2>
        <p>Are you sure you want to delete this category? This action cannot be undone.</p>
        <input type="hidden" id="deleteCategoryId">
        <div class="modal-actions">
            <button id="cancelDelete" class="btn btn-secondary">
                <i class="fas fa-times"></i> Cancel
            </button>
            <button id="confirmDelete" class="btn btn-danger">
                <i class="fas fa-trash"></i> Delete
            </button>
        </div>
    </div>
</div>

<script>
        document.addEventListener('DOMContentLoaded', function() {
        // DOM Elements
        const categoryForm = document.getElementById('categoryForm');
        const categoryTableBody = document.getElementById('categoryTableBody');
        const noCategoriesMessage = document.getElementById('noCategoriesMessage');
        const searchInput = document.getElementById('searchCategory');
        const editModal = document.getElementById('editModal');
        const deleteModal = document.getElementById('deleteModal');
        const closeButtons = document.querySelectorAll('.close');
        const editCategoryForm = document.getElementById('editCategoryForm');
        const confirmDeleteBtn = document.getElementById('confirmDelete');
        const cancelDeleteBtn = document.getElementById('cancelDelete');

        // Global variables
        let categories = [];
        let categoryToDelete = null;

        // Initialize the page
        loadCategories();

        // Form submission for adding a new category
        if (categoryForm) {
            categoryForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const categoryName = document.getElementById('categoryName').value.trim();

                if (categoryName) {
                    const newCategory = {
                        name: categoryName
                    };

                    createCategory(newCategory)
                        .then(createdCategory => {
                            categories.push(createdCategory);
                            renderCategories(categories);
                            categoryForm.reset();
                            showAlert('Category added successfully!', 'success');
                        })
                        .catch(error => {
                            console.error('Error creating category:', error);
                            showAlert('Failed to add category', 'error');
                        });
                }
            });
        }

        // Search functionality
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const filteredCategories = categories.filter(category =>
                    category.name.toLowerCase().includes(searchTerm)
                );
                renderCategories(filteredCategories);
            });
        }

        // Edit category modal
        function openEditModal(category) {
            if (editModal) {
                document.getElementById('editCategoryId').value = category.id;
                document.getElementById('editCategoryName').value = category.name;
                editModal.style.display = 'block';
            }
        }

        // Edit form submission
        if (editCategoryForm) {
            editCategoryForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const id = parseInt(document.getElementById('editCategoryId').value);
                const newName = document.getElementById('editCategoryName').value.trim();

                if (newName) {
                    const updatedCategory = {
                        id: id,
                        name: newName
                    };

                    updateCategory(id, updatedCategory)
                        .then(updatedCategory => {
                            // Update the local categories array
                            const index = categories.findIndex(c => c.id === id);
                            if (index !== -1) {
                                categories[index] = updatedCategory;
                            }

                            // Re-render the categories
                            renderCategories(categories);
                            closeModal('editModal');
                            showAlert('Category updated successfully!', 'success');
                        })
                        .catch(error => {
                            console.error('Error updating category:', error);
                            showAlert('Failed to update category', 'error');
                        });
                }
            });
        }

        // Delete category modal
        function openDeleteModal(category) {
            categoryToDelete = category;
            if (deleteModal) {
                document.getElementById('deleteCategoryId').value = category.id;
                deleteModal.style.display = 'block';
            }
        }

        // Confirm delete
        if (confirmDeleteBtn) {
            confirmDeleteBtn.addEventListener('click', function() {
                if (categoryToDelete) {
                    deleteCategory(categoryToDelete.id)
                        .then(() => {
                            // Remove from local categories array
                            categories = categories.filter(c => c.id !== categoryToDelete.id);
                            renderCategories(categories);
                            closeModal('deleteModal');
                            categoryToDelete = null;
                            showAlert('Category deleted successfully!', 'success');
                        })
                        .catch(error => {
                            console.error('Error deleting category:', error);
                            showAlert('Failed to delete category', 'error');
                        });
                }
            });
        }

        // Cancel delete
        if (cancelDeleteBtn) {
            cancelDeleteBtn.addEventListener('click', function() {
                closeModal('deleteModal');
                categoryToDelete = null;
            });
        }

        // Close modals when clicking the X button
        if (closeButtons) {
            closeButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const modal = this.closest('.modal');
                    if (modal) modal.style.display = 'none';
                    categoryToDelete = null;
                });
            });
        }

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
                categoryToDelete = null;
            }
        });

        // Helper function to close modals
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) modal.style.display = 'none';
        }

        // API Functions
        async function loadCategories() {
            try {
                const response = await fetch('/Category/GetAll');
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                categories = await response.json();
                renderCategories(categories);
            } catch (error) {
                console.error('Error loading categories:', error);
                showAlert('Failed to load categories', 'error');
            }
        }

        async function createCategory(category) {
            const response = await fetch('/Category/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(category)
            });
            if (!response.ok) {
                throw new Error('Failed to create category');
            }
            return await response.json();
        }

            async function updateCategory(id, category) {
        const response = await fetch(`/Category/Update/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(category)
        });
        if (!response.ok) {
            if (response.status === 404) {
                throw new Error('Category not found');
            }
            const errorText = await response.text();
            throw new Error(errorText || 'Failed to update category');
        }
        // Return the category object sent to the server since 204 has no body
        return category;
    }

        async function deleteCategory(id) {
            const response = await fetch(`/Category/Delete/${id}`, {
                method: 'DELETE'
            });
            if (!response.ok) {
                throw new Error('Failed to delete category');
            }
        }

        // Render categories in the table
        function renderCategories(cats) {
            if (!categoryTableBody) return;

            categoryTableBody.innerHTML = '';

            if (cats.length === 0) {
                if (noCategoriesMessage) noCategoriesMessage.style.display = 'block';
                return;
            }

            if (noCategoriesMessage) noCategoriesMessage.style.display = 'none';

            cats.forEach(category => {
                const row = document.createElement('tr');

                row.innerHTML = `
                    <td>${category.name}</td>
                    <td class="action-buttons">
                        <button class="action-btn edit-btn" data-id="${category.id}">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="action-btn delete-btn" data-id="${category.id}">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </td>
                `;

                categoryTableBody.appendChild(row);
            });

            // Add event listeners to edit and delete buttons
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = parseInt(this.getAttribute('data-id'));
                    const category = categories.find(c => c.id === id);
                    if (category) openEditModal(category);
                });
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const id = parseInt(this.getAttribute('data-id'));
                    const category = categories.find(c => c.id === id);
                    if (category) openDeleteModal(category);
                });
            });
        }

        // Show alert message
        function showAlert(message, type) {
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;

            document.body.appendChild(alert);

            // Remove alert after animation
            setTimeout(() => {
                alert.style.opacity = '0';
                setTimeout(() => {
                    alert.remove();
                }, 500);
            }, 2500);
        }
    });
</script>